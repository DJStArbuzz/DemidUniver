#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
#include <fstream>

using namespace std;

void solveB() {
	
	int sn, tn;
	cin >> sn >> tn;
	string s, t;
	cin >> s >> t;
	map<int,int> res;
	string new_str = t + '#' + s;

	int n = new_str.size();
	vector<int> z(n);

	z[0] = 0;
	int l = 0, r = 0;
	for (int i = 1; i < n; i++) {
		if (i <= r) {
			z[i] = min(r - i + 1, z[i - l]);
		}

		while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {
			z[i]++;
		}

		if (i + z[i] - l > r) {
			l = i;
			r = i + z[i] - 1;
		}

		res[z[i]]++;
	}
	
	cout << res[t.size()];
}


vector<int> kmp(string& t, string& s) {
    int n = 0;

    int m = t.length();
    vector<int> pref(m);
    vector<int> res;

    pref[0] = 0;

    int i = 1;
    while (i < t.length()) {

        if (t[i] == t[n]) {
            n++;
            pref[i] = n;
            i++;
        }
        else {
            if (n != 0) {
                n = pref[n - 1];
            }
            else {
                pref[i] = 0;
                i++;
            }
        }
    }

    n = s.length();

    i = 0;
    int j = 0;

    while (i < n) {
        if (s[i] == t[j]) {
            i++;
            j++;

            if (j == m) {
                res.push_back(i - j);
                j = pref[j - 1];
            }
        }

        else {
            if (j != 0)
                j = pref[j - 1];
            else
                i++;
        }
    }
    return res;
}

int main() {

    ifstream cinFile("search.in");
    string s, t;
    cinFile >> s >> t;

    cinFile.close();
    vector<int> res = kmp(t, s);
    
    ofstream coutFile("search.out");
    coutFile << res.size() << '\n';
    for (int i = 0; i < res.size(); i++)
    {
        coutFile << res[i] + 1 << ' ';
    }
    coutFile.close();
    return 0;
}
