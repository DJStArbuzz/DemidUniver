#include <iostream>
#include <cmath>
#include <vector>
#include <string>
#include <algorithm>
#include <fstream>
#include <iomanip>

using namespace std;

const double PI = acos(-1.0);

struct point {
    double x, y;
};

double dot(point A, point B) {
    return A.x * B.x + A.y * B.y;
}

double cross(point A, point B) {
    return A.x * B.y - A.y * B.x;
}

double angle(point A) {
    double angle = atan2(A.y, A.x);

    return angle;
}

double angleV(point A, point B) {
    double tmp = dot(A, B);
    double angle = acos(tmp / (sqrt(pow(A.x, 2) + pow(A.y, 2)) * sqrt(pow(B.x, 2) + pow(B.y, 2))));
    if (angle < 0) {
        angle += PI;
    }

    return angle;
}

double lengthV(point first, point second) {
    double tmp = sqrt(pow(second.x - first.x, 2) + pow(second.y - first.y, 2));
    return tmp;
}

double square(double first, double second, double third) {
    double tmp = (first + second + third) / 2;
    return tmp;
}


int main()
{
    ifstream fileIn("distance2.in");
    ofstream fileOut("distance2.out");

    point B, A, C, AB, AC;
    fileIn >> B.x >> B.y >> A.x >> A.y >> C.x >> C.y;
    AB.x = B.x - A.x, AB.y = B.y - A.y;
    AC.x = C.x - A.x, AC.y = C.y - A.y;
    fileIn.close();
    
    double tmp = dot(AB, AC);
    double leAB = lengthV(A, B);
    double leAC = lengthV(A, C);

    double res = leAB * sqrt(1 - pow(abs(dot(AB, AC)) / leAB / leAC, 2));
    fileOut << fixed << setprecision(6) << res;

    fileOut.close();
    return 0;

}
